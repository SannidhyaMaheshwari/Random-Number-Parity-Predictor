# -*- coding: utf-8 -*-
"""Stat-testPRNG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jtFafrc3Qr0KCG3y6NNl10qpY05xTGGF

# **# Statistical Tests for PRNG Evaluation**
**Frequency (Monobit) Test**

Checks if the number of 0s and 1s in the binary representation are approximately equal.

**Runs Test**

Checks if sequences of consecutive 0s and 1s (runs) occur with expected frequency.

**Autocorrelation Test**

Measures correlation between a number and its previous values (lag-based test).

**Chi-Square Test**

Compares expected and observed frequency distributions of numbers.

**Kolmogorov-Smirnov Test**

Compares the empirical distribution of generated numbers with a uniform distribution.

**Spectral Test (Fourier Transform)**

Checks for periodic patterns in the generated sequence.

**Dieharder & NIST Test Suites**

Advanced test suites for randomness validation.
"""

import numpy as np
import pandas as pd# Statistical Tests for PRNG Evaluation

# Load the dataset
file_path = "random_numbers.csv"
data = pd.read_csv(file_path, header=None, names=["number"])

# Convert to 32-bit unsigned integers
numbers = data["number"].astype(np.uint32)

def frequency_monobit_test(numbers):
    bitstream = ''.join(f'{num:032b}' for num in numbers)  # Convert numbers to binary
    ones = bitstream.count('1')
    zeros = bitstream.count('0')
    total_bits = len(bitstream)

    p_value = abs(ones - zeros) / total_bits  # Deviation from uniformity
    print(f"Frequency Test: Ones = {ones}, Zeros = {zeros}, P-value = {p_value}")

from statsmodels.sandbox.stats.runs import runstest_1samp

def runs_test(numbers):
    bitstream = np.array([int(b) for num in numbers for b in f'{num:032b}'])  # Convert to binary
    z_stat, p_value = runstest_1samp(bitstream, correction=False)
    print(f"Runs Test: Z-Stat = {z_stat}, P-Value = {p_value}")

from scipy.stats import chisquare

def chi_square_test(numbers, bins=256):
    observed_freq, _ = np.histogram(numbers, bins=bins, range=(0, 2**32))
    expected_freq = [len(numbers) / bins] * bins  # Expected uniform distribution
    chi_stat, p_value = chisquare(observed_freq, expected_freq)
    print(f"Chi-Square Test: Chi-Stat = {chi_stat}, P-Value = {p_value}")

from scipy.stats import kstest

def ks_test(numbers):
    normalized_numbers = numbers / (2**32)  # Scale to [0,1]
    ks_stat, p_value = kstest(normalized_numbers, 'uniform')
    print(f"Kolmogorov-Smirnov Test: KS-Stat = {ks_stat}, P-Value = {p_value}")

import matplotlib.pyplot as plt

def autocorrelation_test(numbers, lag=1):
    correlation = np.corrcoef(numbers[:-lag], numbers[lag:])[0, 1]
    print(f"Autocorrelation Test (Lag {lag}): Correlation = {correlation}")

frequency_monobit_test(numbers)
runs_test(numbers)
chi_square_test(numbers)
ks_test(numbers)
autocorrelation_test(numbers, lag=1)
